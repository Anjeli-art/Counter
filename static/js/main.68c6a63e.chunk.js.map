{"version":3,"sources":["UniversalButton.tsx","Starter.tsx","Counter.tsx","Redux/counter-reducer.ts","App.tsx","reportWebVitals.ts","Redux/store.ts","index.tsx"],"names":["UniversalButton","disabled","title","callBack","buttonRes","backgroundColor","borderRadius","margin","display","fontWeight","fontSize","color","border","padding","buttonInc","buttonSet","onClick","style","Starter","buttonDis","inputValueMax","inputValueMin","onSet","props","disSet","conditions","borderMin","borderMax","label","inputMin","outline","inputMax","minHeight","marginRight","width","className","marginBottom","type","value","onChange","onChangeValueMax","onChangeValueMin","Counter","data","startDis","disInc","disRes","counter","dataString","valueblock","alignItems","justifyContent","lineHeight","upDate","upReset","SET_DATA","SET_INPUT_VALUE_MIN","SET_INPUT_VALUE_MAX","SET_DATA_STRING","SET_BUTTON_DIS","SET_START_DIS","SET_SET_DIS","initialState","setButton","setDataAC","setDataStringAC","setButtonDisAC","setStartDisAC","buttonStart","seSetButtonDisAC","App","useSelector","state","dispatch","useDispatch","height","e","maxValue","currentTarget","valueMax","minValue","valueMin","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","RootReducer","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.68c6a63e.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport type UniversalButonType = {\r\n    disabled: boolean\r\n    title: string\r\n    callBack: () => void\r\n}\r\n\r\n\r\nexport const UniversalButton:React.FC<UniversalButonType>=({disabled,title,callBack,...props})=> {\r\n\r\n    const buttonRes = {\r\n        backgroundColor: disabled ? \"#57667b\" : \"#c2fdf4\",\r\n        borderRadius: \"10px\",\r\n        margin: \"5px 0 5px 15px\",\r\n        display:\"block\",\r\n        fontWeight: 800,\r\n        fontSize: \"200%\",\r\n        color: \"#282c34\",\r\n        border: \"0\",\r\n        padding: \"10px\"\r\n    }\r\n    const buttonInc = {\r\n        backgroundColor: disabled ? \"#57667b\" : \"#c2fdf4\",\r\n        borderRadius: \"10px\",\r\n        margin: \"5px 0\",\r\n        display:\"block\",\r\n        fontWeight: 800,\r\n        fontSize: \"200%\",\r\n        color: \"#282c34\",\r\n        border: \"0\",\r\n        padding: \"10px\"\r\n    }\r\n    const buttonSet = {\r\n        backgroundColor: disabled ? \"#57667b\" : \"#c2fdf4\",\r\n        borderRadius: \"10px\",\r\n        margin: \"5px auto\",\r\n        display:\"block\",\r\n        fontWeight: 800,\r\n        fontSize: \"200%\",\r\n        color: \"#282c34\",\r\n        border: \"0\",\r\n        padding: \"10px\"\r\n\r\n    }\r\n\r\n    return (\r\n        <button disabled={disabled}\r\n                onClick={callBack}\r\n                style={title === \"set\" ? buttonSet : title === \"reset\" ? buttonRes : buttonInc}>{title}</button>\r\n    )\r\n\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {UniversalButton} from \"./UniversalButton\";\r\n\r\nexport type StarterType = {\r\n    buttonDis: boolean\r\n    inputValueMax: number\r\n    inputValueMin: number\r\n    onSet: () => void\r\n    onChangeValueMax: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeValueMin: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const Starter: React.FC<StarterType> = ({buttonDis, inputValueMax, inputValueMin, onSet, ...props}) => {\r\n\r\n    const disSet = inputValueMax < 0 || inputValueMin < 0 || inputValueMax === inputValueMin || inputValueMin > inputValueMax || buttonDis ? true : false\r\n    const conditions = inputValueMax === inputValueMin || inputValueMin > inputValueMax\r\n    const borderMin = conditions || inputValueMin < 0\r\n    const borderMax = conditions || inputValueMax < 0\r\n\r\n    const counter = {\r\n        minHeight:\"300px\",\r\n        padding:\"20px\",\r\n        backgroundColor: \"#282c34\",\r\n        marginRight:\"100px\",\r\n        border: \"4px solid #c2fdf4\",\r\n        borderRadius: \"15px\",\r\n        width: \"390px\",\r\n    }\r\n    const inputblock = {\r\n        border: \"4px solid #c2fdf4\",\r\n        borderRadius: \"15px\",\r\n        marginBottom: \"10px\",\r\n        padding:\"15px 5px 15px 5px\",\r\n        color: \"#c2fdf4\",\r\n    }\r\n    const buttonBlock= {\r\n        border: \"4px solid #c2fdf4\",\r\n        borderRadius: \"15px\",\r\n        padding: \"10px\"\r\n    }\r\n    const label = {\r\n        fontWeight: 800,\r\n        fontSize: \"150%\",\r\n    }\r\n    const inputMin = {\r\n        borderRadius: \"10px\",\r\n        padding: \"8px\",\r\n        outline: \"0\",\r\n        border: borderMin ? \"4px solid #7f0703\" : \"4px solid #c2fdf4\",\r\n        backgroundColor: borderMin ? \"#fca3a3\" : \"#f0fdf9\"\r\n    }\r\n    const inputMax = {\r\n        borderRadius: \"10px\",\r\n        padding: \"8px\",\r\n        outline: \"0\",\r\n        border: borderMax ? \"4px solid #7f0703\" : \"4px solid #c2fdf4\",\r\n        backgroundColor: borderMax ? \"#fca3a3\" : \"#f0fdf9\"\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={counter} className={\"counter\"}>\r\n            <div style={inputblock}>\r\n                <label style={label}>max value:</label>\r\n                <input type=\"number\" value={inputValueMax} onChange={props.onChangeValueMax} style={inputMax}/>\r\n                <br/>\r\n                <br/>\r\n                <label style={label}>min value:</label>\r\n                <input type=\"number\" value={inputValueMin} onChange={props.onChangeValueMin} style={inputMin}/>\r\n            </div>\r\n            <div style={buttonBlock}>\r\n                <UniversalButton title={\"set\"} callBack={onSet} disabled={disSet}/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {UniversalButton} from \"./UniversalButton\";\r\n\r\nexport type CounterType = {\r\n    inputValueMax: number\r\n    inputValueMin: number\r\n    data: number\r\n    dataString: string\r\n    buttonSet: boolean\r\n    upDate: () => void\r\n    upReset: () => void\r\n    startDis: boolean\r\n}\r\n\r\nexport const Counter: React.FC<CounterType> = ({inputValueMax, inputValueMin, data, startDis, ...props}) => {\r\n\r\n    const conditions = inputValueMax < 0 || inputValueMin < 0 || inputValueMax === inputValueMin || inputValueMin > inputValueMax\r\n    const color = conditions || data === inputValueMax\r\n    const disInc = conditions || inputValueMax === data || startDis ? true : false\r\n    const disRes = conditions || startDis ? true : false\r\n    const counter = props.buttonSet === false ? props.dataString : data\r\n\r\n    const counterTwo = {\r\n        padding: \"20px\",\r\n        width: \"390px\",\r\n        backgroundColor: \"#282c34\",\r\n        border: \"4px solid #c2fdf4\",\r\n        borderRadius: \"15px\",\r\n        minHeight: \"300px\"\r\n    }\r\n    const valueblock = {\r\n        \"text-align\": \"center\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        border: \"4px solid #c2fdf4\",\r\n        minHeight: \"150px\",\r\n        borderRadius: \"15px\",\r\n        marginBottom: \"10px\",\r\n        lineHeight: \"1.2\",\r\n        color: color ? \"#7f0703\" : \"#c2fdf4\",\r\n        fontWeight: 800,\r\n        fontSize: typeof counter === \"number\" ? \"500%\" : \"300%\",\r\n    }\r\n    const buttonBlockTwo = {\r\n        border: \"4px solid #c2fdf4\",\r\n        borderRadius: \"15px\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        padding: \"10px\"\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={counterTwo}>\r\n            <div style={valueblock}>{counter}</div>\r\n            <div style={buttonBlockTwo}>\r\n                <UniversalButton title={\"inc\"}\r\n                                 disabled={disInc}\r\n                                 callBack={props.upDate}/>\r\n                <UniversalButton title={\"reset\"}\r\n                                 disabled={disRes}\r\n                                 callBack={props.upReset}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import {ActionValuesType} from \"./store\";\r\n\r\nconst SET_DATA = \"SET_DATA\"\r\nconst SET_INPUT_VALUE_MIN = \"SET_INPUT_VALUE_MIN\"\r\nconst SET_INPUT_VALUE_MAX = \"SET_INPUT_VALUE_MAX\"\r\nconst SET_DATA_STRING = \"SET_DATA_STRING\"\r\nconst SET_BUTTON_DIS = \"SET_BUTTON_DIS\"\r\nconst SET_START_DIS = \"SET_START_DIS\"\r\nconst SET_SET_DIS = \"SET_BUTTON_SET_DIS\"\r\n\r\n// type InitialStateType = {\r\n//     data: number\r\n//     inputValueMin: number\r\n//     inputValueMax: number\r\n//     dataString: string\r\n//     buttonDis: boolean\r\n//     startDis: boolean\r\n//     setButton: boolean\r\n// }\r\n\r\n\r\nlet initialState = {\r\n    data: 0,\r\n    inputValueMin: 0,\r\n    inputValueMax: 0,\r\n    dataString: \"error value!\",\r\n    buttonDis: false,\r\n    startDis: true,\r\n    setButton: false\r\n}\r\ntype InitialStateType=typeof initialState\r\n\r\nexport const counterReducer = (state:InitialStateType = initialState, action: ActionValuesType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_DATA:\r\n            return {...state, data: action.data}\r\n        case SET_INPUT_VALUE_MIN:\r\n            return {...state, inputValueMin: action.valueMin}\r\n        case SET_INPUT_VALUE_MAX:\r\n            return {...state, inputValueMax: action.valueMax}\r\n        case SET_DATA_STRING:\r\n            return {...state, dataString: action.dataString}\r\n        case SET_BUTTON_DIS:\r\n            return {...state, buttonDis: action.buttonDis}\r\n        case SET_START_DIS:\r\n            return {...state, startDis: action.buttonStart}\r\n        case SET_SET_DIS:\r\n            return {...state, setButton: action.buttonSet}\r\n        default :\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setDataAC = (data: number) => ({type: SET_DATA, data}) as const\r\nexport const setinputValueMinAC = (valueMin: number) => ({type: SET_INPUT_VALUE_MIN, valueMin}) as const\r\nexport const setinputValueMaxAC = (valueMax: number) => ({type: SET_INPUT_VALUE_MAX, valueMax}) as const\r\nexport const setDataStringAC = (dataString: string) => ({type: SET_DATA_STRING, dataString}) as const\r\nexport const setButtonDisAC = (buttonDis: boolean) => ({type: SET_BUTTON_DIS, buttonDis}) as const\r\nexport const setStartDisAC = (buttonStart: boolean) => ({type: SET_START_DIS, buttonStart}) as const\r\nexport const seSetButtonDisAC = (buttonSet: boolean) => ({type: SET_SET_DIS, buttonSet}) as const","import React, {ChangeEvent} from 'react';\nimport {Starter} from \"./Starter\";\nimport {Counter} from \"./Counter\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {RootStateType} from \"./Redux/store\";\nimport {\n    seSetButtonDisAC,\n    setButtonDisAC,\n    setDataAC,\n    setDataStringAC,\n    setinputValueMaxAC,\n    setinputValueMinAC, setStartDisAC\n} from \"./Redux/counter-reducer\";\n\n\nexport const App: React.FC = () => {\n\n//     let [data, setData] = useState(0)\n//     const [inputValueMin, setinputValueMin] = useState(0)\n//     const [inputValueMax, setinputValueMax] = useState(0)\n//     const [dataString, setDataString] = useState(\"error value!\")\n//     const [buttonDis, setbuttonDis] = useState(false)\n//     const [startDis, setStartDis] = useState(true)\n// const [set, setSet] = useState(false)\n\n    let data = useSelector<RootStateType, number>(state => state.counter.data)\n    const inputValueMin = useSelector<RootStateType, number>(state => state.counter.inputValueMin)\n    const inputValueMax = useSelector<RootStateType, number>(state => state.counter.inputValueMax)\n    const dataString = useSelector<RootStateType, string>(state => state.counter.dataString)\n    const buttonDis = useSelector<RootStateType, boolean>(state => state.counter.buttonDis)\n    const startDis = useSelector<RootStateType, boolean>(state => state.counter.startDis)\n    const buttonSet = useSelector<RootStateType, boolean>(state => state.counter.setButton)\n\n    const dispatch = useDispatch()\n\n    const onChangeValueMin = (e: ChangeEvent<HTMLInputElement>) => {\n        const minValue = +e.currentTarget.value\n        dispatch(setinputValueMinAC(minValue))\n        dispatch(setButtonDisAC(false))\n\n        if (inputValueMax <= 0 || minValue < 0 || minValue >= inputValueMax) {\n            dispatch(setDataStringAC(\"error value!\"))\n        } else {\n            dispatch(setDataStringAC(\"enter value and press set\"))\n        }\n    }\n\n    const onChangeValueMax = (e: ChangeEvent<HTMLInputElement>) => {\n        const maxValue = +e.currentTarget.value\n        dispatch(setinputValueMaxAC(maxValue))\n        dispatch(setButtonDisAC(false))\n\n        if (maxValue <= 0 || inputValueMin < 0 || inputValueMin >= maxValue) {\n            dispatch(setDataStringAC(\"error value!\"))\n        } else {\n            dispatch(setDataStringAC(\"enter value and press set\"))\n        }\n    }\n\n    const upDate = () => {\n        if (data < inputValueMax)\n            dispatch(setDataAC(data + 1))\n    }\n    const upReset = () => {\n        dispatch(setDataAC(0))\n        dispatch(seSetButtonDisAC(false))\n        dispatch(setStartDisAC(true))\n    }\n    const onSet = () => {\n        dispatch(setDataAC(inputValueMin))\n        dispatch(setButtonDisAC(!buttonDis))\n        dispatch(seSetButtonDisAC(true))\n        dispatch(setStartDisAC(false))\n    }\n\n    // useEffect(() => {\n    //     let str = localStorage.getItem(\"inputValueMin\")\n    //     if (str) {\n    //         let num = JSON.parse(str)\n    //         setinputValueMin(num)\n    //     }\n    // }, [])\n    //\n    // useEffect(() => {\n    //     localStorage.setItem(\"inputValueMin\", JSON.stringify(inputValueMin))\n    // }, [inputValueMin])\n    //\n    //\n    // useEffect(() => {\n    //     let str = localStorage.getItem(\"inputValueMax\")\n    //     if (str) {\n    //         let num = JSON.parse(str)\n    //         setinputValueMax(num)\n    //     }\n    // }, [])\n    // useEffect(() => {\n    //     localStorage.setItem(\"inputValueMax\", JSON.stringify(inputValueMax))\n    // }, [inputValueMax])\n    // useEffect(() => {\n    //     let str = localStorage.getItem(\"set\")\n    //     if (str) {\n    //         let num = JSON.parse(str)\n    //         setSet(num)\n    //     }\n    // }, [])\n    // useEffect(() => {\n    //     localStorage.setItem(\"set\", JSON.stringify(set))\n    // }, [set])\n    // useEffect(() => {\n    //     let str = localStorage.getItem(\"data\")\n    //     if (str) {\n    //         let num = JSON.parse(str)\n    //         setData(num)\n    //     }\n    // }, [])\n    // useEffect(() => {\n    //     localStorage.setItem(\"data\", JSON.stringify(data))\n    // }, [data])\n    // useEffect(() => {\n    //     let str = localStorage.getItem(\"dataString\")\n    //     if (str) {\n    //         let num = JSON.parse(str)\n    //         setDataString(num)\n    //     }\n    // }, [])\n    // useEffect(() => {\n    //     localStorage.setItem(\"dataString\", JSON.stringify(dataString))\n    // }, [dataString])\n    // useEffect(() => {\n    //     let str = localStorage.getItem(\"buttonDis\")\n    //     if (str) {\n    //         let num = JSON.parse(str)\n    //         setbuttonDis(num)\n    //     }\n    // }, [])\n    // useEffect(() => {\n    //     localStorage.setItem(\"buttonDis\", JSON.stringify(buttonDis))\n    // }, [buttonDis])\n    // useEffect(() => {\n    //     let str = localStorage.getItem(\"startDis\")\n    //     if (str) {\n    //         let num = JSON.parse(str)\n    //         setStartDis(num)\n    //     }\n    // }, [])\n    // useEffect(() => {\n    //     localStorage.setItem(\"startDis\", JSON.stringify(startDis))\n    // }, [startDis])\n\n\n    const block = {\n        height: \"100%\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n\n    }\n\n    return (\n        <div style={block} className={\"block\"}>\n            <Starter buttonDis={buttonDis}\n                     inputValueMax={inputValueMax}\n                     inputValueMin={inputValueMin}\n                     onSet={onSet}\n                     onChangeValueMax={onChangeValueMax}\n                     onChangeValueMin={onChangeValueMin}\n            />\n            <Counter inputValueMax={inputValueMax}\n                     inputValueMin={inputValueMin}\n                     data={data}\n                     dataString={dataString}\n                     buttonSet={buttonSet}\n                     upDate={upDate}\n                     upReset={upReset}\n                     startDis={startDis}/>\n        </div>\n    );\n}\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore, Store} from \"redux\";\r\nimport {\r\n    counterReducer, seSetButtonDisAC,\r\n    setButtonDisAC,\r\n    setDataAC,\r\n    setDataStringAC,\r\n    setinputValueMaxAC,\r\n    setinputValueMinAC, setStartDisAC\r\n} from \"./counter-reducer\";\r\n\r\n\r\n\r\nexport type ActionValuesType=\r\n    ReturnType<typeof setDataAC>|\r\n    ReturnType<typeof setinputValueMinAC>|\r\n    ReturnType<typeof setinputValueMaxAC>|\r\n    ReturnType<typeof setDataStringAC>|\r\n    ReturnType<typeof setButtonDisAC>|\r\n    ReturnType<typeof setStartDisAC>|\r\n    ReturnType<typeof seSetButtonDisAC>\r\n\r\n\r\nlet RootReducer=combineReducers({\r\n    counter:counterReducer\r\n})\r\n\r\nexport type RootStateType=ReturnType<typeof RootReducer>\r\n\r\nexport const store:Store<RootStateType,ActionValuesType>=createStore(RootReducer)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from \"./Redux/store\";\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n)\n;\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}