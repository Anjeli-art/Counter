{"version":3,"sources":["UniversalButton.tsx","Starter.tsx","Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["UniversalButton","props","buttonRes","backgroundColor","disabled","borderRadius","padding","margin","fontWeight","fontSize","color","border","buttonInc","buttonSet","onClick","Callback","style","title","Starter","disSet","dataMax","dataMin","buttonDis","bordermin","bordermax","label","inputMin","outline","inputMax","width","marginBottom","type","value","inputValueMax","onChange","onChangeValueMax","inputValueMin","onChangeValueMin","onSet","Counter","data","disInc","startDis","disRes","counter","set","dataString","valueblock","height","upDate","upReset","App","useState","setData","setinputValueMin","setinputValueMax","setDataString","setbuttonDis","setStartDis","setSet","useEffect","str","localStorage","getItem","num","JSON","parse","setItem","stringify","display","e","minvalue","currentTarget","minValue","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6bfc1af2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport type UniversalButonType = {\r\n    disabled: boolean\r\n    title: string\r\n    Callback: () => void\r\n}\r\n\r\n\r\nexport function UniversalButton(props: UniversalButonType) {\r\n\r\n    const buttonRes = {\r\n        backgroundColor: props.disabled ? \"#57667b\" : \"#c2fdf4\",\r\n        borderRadius: \"10px\",\r\n        padding: \"10px\",\r\n        margin: \"5px\",\r\n        fontWeight: 800,\r\n        fontSize: \"200%\",\r\n        color: \"#282c34\",\r\n        border: \"0\",\r\n    }\r\n    const buttonInc = {\r\n        backgroundColor: props.disabled ? \"#57667b\" : \"#c2fdf4\",\r\n        borderRadius: \"10px\",\r\n        padding: \"10px\",\r\n        margin: \"5px\",\r\n        fontWeight: 800,\r\n        fontSize: \"200%\",\r\n        color: \"#282c34\",\r\n        border: \"0\",\r\n    }\r\n    const buttonSet = {\r\n        backgroundColor: props.disabled ? \"#57667b\" : \"#c2fdf4\",\r\n        borderRadius: \"10px\",\r\n        padding: \"10px\",\r\n        margin: \"5px\",\r\n        fontWeight: 800,\r\n        fontSize: \"200%\",\r\n        color: \"#282c34\",\r\n        border: \"0\",\r\n    }\r\n\r\n    return (\r\n        <button disabled={props.disabled}\r\n                onClick={props.Callback}\r\n                style={props.title === \"set\" ? buttonSet : props.title === \"reset\" ? buttonRes : buttonInc}>{props.title}</button>\r\n    )\r\n\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {UniversalButton} from \"./UniversalButton\";\r\n\r\nexport type StarterType = {\r\n    dataMax: number\r\n    dataMin: number\r\n    buttonDis: boolean\r\n    inputValueMax: number\r\n    inputValueMin: number\r\n    onSet: () => void\r\n    onChangeValueMax: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangeValueMin: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport function Starter(props: StarterType) {\r\n\r\n    let disSet = props.dataMax < 0 || props.dataMin < 0 || props.dataMax === props.dataMin || props.dataMin > props.dataMax || props.buttonDis ? true : false\r\n    let bordermin = props.dataMax === props.dataMin || props.dataMin < 0 || props.dataMin > props.dataMax\r\n    let bordermax = props.dataMax === props.dataMin || props.dataMax < 0\r\n\r\n    const counter1 = {\r\n        width: \"350px\",\r\n        backgroundColor: \"#282c34\",\r\n        padding: \"20px\",\r\n        margin: \"100px 150px 350px 250px\",\r\n        border: \"4px solid #c2fdf4\",\r\n        borderRadius: \"15px\",\r\n    }\r\n    const inputblock = {\r\n        border: \"4px solid #c2fdf4\",\r\n        borderRadius: \"15px\",\r\n        padding: \"10px\",\r\n        marginBottom: \"10px\",\r\n        color: \"#c2fdf4\",\r\n    }\r\n    const buttonBlock1 = {\r\n        border: \"4px solid #c2fdf4\",\r\n        borderRadius: \"15px\",\r\n        padding: \"10px 0px 10px 120px\",\r\n    }\r\n    const label = {\r\n        fontWeight: 800,\r\n        fontSize: \"150%\",\r\n    }\r\n    const inputMin = {\r\n        borderRadius: \"10px\",\r\n        padding: \"8px\",\r\n        outline: \"0\",\r\n        border: bordermin ? \"4px solid #7f0703\" : \"4px solid #c2fdf4\",\r\n        backgroundColor: bordermin ? \"#fca3a3\" : \"#f0fdf9\"\r\n    }\r\n    const inputMax = {\r\n        borderRadius: \"10px\",\r\n        padding: \"8px\",\r\n        outline: \"0\",\r\n        border: bordermax ? \"4px solid #7f0703\" : \"4px solid #c2fdf4\",\r\n        backgroundColor: bordermax ? \"#fca3a3\" : \"#f0fdf9\"\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={counter1}>\r\n            <div style={inputblock}>\r\n                <label style={label}>max value:</label>\r\n                <input type=\"number\" value={props.inputValueMax} onChange={props.onChangeValueMax} style={inputMax}/>\r\n                <br/>\r\n                <br/>\r\n                <label style={label}>min value:</label>\r\n                <input type=\"number\" value={props.inputValueMin} onChange={props.onChangeValueMin} style={inputMin}/>\r\n            </div>\r\n            <div style={buttonBlock1}>\r\n                <UniversalButton title={\"set\"} Callback={props.onSet} disabled={disSet}/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React from 'react';\r\nimport {UniversalButton} from \"./UniversalButton\";\r\n\r\nexport type CounterType = {\r\n    dataMax: number\r\n    dataMin: number\r\n    data: number\r\n    dataString: string\r\n    set: boolean\r\n    upDate: () => void\r\n    upReset: () => void\r\n    startDis: boolean\r\n}\r\n\r\nexport function Counter(props: CounterType) {\r\n\r\n    let color = props.dataMax < 0 || props.dataMin < 0 || props.dataMax === props.dataMin || props.dataMin > props.dataMax || props.data === props.dataMax\r\n    let disInc = props.dataMax < 0 || props.dataMin < 0 || props.dataMax === props.dataMin || props.dataMin > props.dataMax || props.dataMax === props.data || props.startDis ? true : false\r\n    let disRes = props.dataMax < 0 || props.dataMin < 0 || props.dataMax === props.dataMin || props.dataMin > props.dataMax || props.startDis ? true : false\r\n    let counter = props.set === false ? props.dataString : props.data\r\n\r\n    const counter2 = {\r\n        width: \"350px\",\r\n        backgroundColor: \"#282c34\",\r\n        padding: \"20px\",\r\n        margin: \"100px 100px 350px 100px\",\r\n        border: \"4px solid #c2fdf4\",\r\n        borderRadius: \"15px\",\r\n    }\r\n    const valueblock = {\r\n        \"text-align\": \"center\",\r\n        border: \"4px solid #c2fdf4\",\r\n        height: \"130px\",\r\n        borderRadius: \"15px\",\r\n        marginBottom: \"10px\",\r\n        color: color ? \"#7f0703\" : \"#c2fdf4\",\r\n        fontWeight: 800,\r\n        fontSize: typeof counter === \"number\" ? \"500%\" : \"300%\",\r\n    }\r\n    const buttonBlock2 = {\r\n        border: \"4px solid #c2fdf4\",\r\n        borderRadius: \"15px\",\r\n        padding: \"10px 0px 10px 70px\",\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={counter2}>\r\n            <div style={valueblock}>{counter}</div>\r\n            <div style={buttonBlock2}>\r\n                <UniversalButton title={\"inc\"}\r\n                                disabled={disInc}\r\n                                Callback={props.upDate}/>\r\n                <UniversalButton title={\"reset\"}\r\n                                disabled={disRes}\r\n                                Callback={props.upReset}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport {Starter} from \"./Starter\";\nimport {Counter} from \"./Counter\";\n\n\nfunction App() {\n\n    let [data, setData] = useState(0)\n    const [inputValueMin, setinputValueMin] = useState(0)\n    const [inputValueMax, setinputValueMax] = useState(0)\n    let [dataString, setDataString] = useState(\"error value!\")\n    let [buttonDis, setbuttonDis] = useState(false)\n    let [startDis, setStartDis] = useState(true)\n    let dataMin = inputValueMin\n    let dataMax = inputValueMax\n\n    let onChangeValueMin = (e: ChangeEvent<HTMLInputElement>) => {\n        const minValue = +e.currentTarget.value\n        setinputValueMin(minValue)\n        console.log(inputValueMin)\n        setbuttonDis(false)\n\n        if (dataMax <= 0 || minValue < 0 || minValue >= dataMax) {\n            setDataString(\"error value!\")\n        } else {\n            setDataString(\"enter value and press set\")\n        }\n    }\n\n    let onChangeValueMax = (e: ChangeEvent<HTMLInputElement>) => {\n        const minvalue = +e.currentTarget.value\n        setinputValueMax(minvalue)\n        setbuttonDis(false)\n\n        if (minvalue <= 0 || dataMin < 0 || dataMin >= minvalue) {\n            setDataString(\"error value!\")\n        } else {\n            setDataString(\"enter value and press set\")\n        }\n    }\n    let [set, setSet] = useState(false)\n\n    const upDate = () => {\n        const count = data + 1\n        if (data < dataMax)\n            setData(count)\n    }\n    const upReset = () => {\n        setData(data = 0)\n        setSet(false)\n        setStartDis(true)\n    }\n    let onSet = () => {\n        setData(inputValueMin)\n        setbuttonDis(!buttonDis)\n        setSet(true)\n        setStartDis(false)\n    }\n\n    useEffect(() => {\n        let str = localStorage.getItem(\"inputValueMin\")\n        if (str) {\n            let num = JSON.parse(str)\n            setinputValueMin(num)\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem(\"inputValueMin\", JSON.stringify(inputValueMin))\n    }, [inputValueMin])\n    useEffect(() => {\n        let str = localStorage.getItem(\"inputValueMax\")\n        if (str) {\n            let num = JSON.parse(str)\n            setinputValueMax(num)\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem(\"inputValueMax\", JSON.stringify(inputValueMax))\n    }, [inputValueMax])\n    useEffect(() => {\n        let str = localStorage.getItem(\"set\")\n        if (str) {\n            let num = JSON.parse(str)\n            setSet(num)\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem(\"set\", JSON.stringify(set))\n    }, [set])\n    useEffect(() => {\n        let str = localStorage.getItem(\"data\")\n        if (str) {\n            let num = JSON.parse(str)\n            setData(num)\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem(\"data\", JSON.stringify(data))\n    }, [data])\n    useEffect(() => {\n        let str = localStorage.getItem(\"dataString\")\n        if (str) {\n            let num = JSON.parse(str)\n            setDataString(num)\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem(\"dataString\", JSON.stringify(dataString))\n    }, [dataString])\n    useEffect(() => {\n        let str = localStorage.getItem(\"buttonDis\")\n        if (str) {\n            let num = JSON.parse(str)\n            setbuttonDis(num)\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem(\"buttonDis\", JSON.stringify(buttonDis))\n    }, [buttonDis])\n    useEffect(() => {\n        let str = localStorage.getItem(\"startDis\")\n        if (str) {\n            let num = JSON.parse(str)\n            setStartDis(num)\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem(\"startDis\", JSON.stringify(startDis))\n    }, [startDis])\n\n\n    const block = {\n        height: \"100vh\",\n        backgroundColor: \"#282c34\",\n        display: \"flex\",\n    }\n\n    return (\n        <div style={block}>\n            <Starter dataMax={dataMax}\n                     dataMin={dataMin}\n                     buttonDis={buttonDis}\n                     inputValueMax={inputValueMax}\n                     inputValueMin={inputValueMin}\n                     onSet={onSet}\n                     onChangeValueMax={onChangeValueMax}\n                     onChangeValueMin={onChangeValueMin}\n            />\n            <Counter dataMax={dataMax}\n                     dataMin={dataMin}\n                     data={data}\n                     dataString={dataString}\n                     set={set}\n                     upDate={upDate}\n                     upReset={upReset}\n                     startDis={startDis}/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n)\n;\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}